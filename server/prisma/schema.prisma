// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  profileImage String
  handle       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  followers    User[]    @relation("UserFollows")
  following    User[]    @relation("UserFollows")
  videos       Video[]
  Like         Like[]
  Comment      Comment[]
}

model Video {
  id           String    @id @default(uuid())
  title        String
  description  String
  videoSrc     String
  thumbnailUrl String
  tags         Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
  Like         Like[]
  Comment      Comment[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  video     Video     @relation(fields: [videoId], references: [id])
  videoId   String
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  String?
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
}
